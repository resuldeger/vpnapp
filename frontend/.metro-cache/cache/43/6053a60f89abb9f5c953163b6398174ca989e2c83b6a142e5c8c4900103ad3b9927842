{"dependencies":[{"name":"@babel/runtime/helpers/interopRequireDefault","data":{"asyncType":null,"isESMImport":false,"locs":[],"key":"kslwqCIsh6ew+I1KeA1rlVRjsAk=","exportNames":["*"]}},{"name":"expo-modules-core","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":1,"column":56,"index":56}}],"key":"fU8WLIPqoAGygnPbZ/QJiQQfXEY=","exportNames":["*"]}},{"name":"react-native-web/dist/exports/AppState","data":{"asyncType":null,"isESMImport":false,"locs":[],"key":"JfCM6WRyn2619+pzBJhEHd1+SSw=","exportNames":["*"]}},{"name":"react-native-web/dist/exports/Linking","data":{"asyncType":null,"isESMImport":false,"locs":[],"key":"3Rjz9Of4YombbpmYBhNmyoa9U9Y=","exportNames":["*"]}},{"name":"react-native-web/dist/exports/Platform","data":{"asyncType":null,"isESMImport":false,"locs":[],"key":"dV3bI3NOD8bfMzaIniMaFGy/nn8=","exportNames":["*"]}},{"name":"react-native-web/dist/exports/processColor","data":{"asyncType":null,"isESMImport":false,"locs":[],"key":"8DdbuUtV90Z/t9ffltCQA3iNnjQ=","exportNames":["*"]}},{"name":"./ExpoWebBrowser","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":3,"column":0,"index":132},"end":{"line":3,"column":50,"index":182}}],"key":"OZkL6dn5GThy2fR1W+98Qlxlxh4=","exportNames":["*"]}},{"name":"./WebBrowser.types","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":4,"column":0,"index":183},"end":{"line":4,"column":88,"index":271}}],"key":"29Oh91VcmrXUhNZnDncgfxSU3bQ=","exportNames":["*"]}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  var _interopRequireDefault = require(_dependencyMap[0], \"@babel/runtime/helpers/interopRequireDefault\");\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  Object.defineProperty(exports, \"WebBrowserPresentationStyle\", {\n    enumerable: true,\n    get: function () {\n      return _WebBrowser.WebBrowserPresentationStyle;\n    }\n  });\n  Object.defineProperty(exports, \"WebBrowserResultType\", {\n    enumerable: true,\n    get: function () {\n      return _WebBrowser.WebBrowserResultType;\n    }\n  });\n  exports.coolDownAsync = coolDownAsync;\n  exports.dismissAuthSession = dismissAuthSession;\n  exports.dismissBrowser = dismissBrowser;\n  exports.getCustomTabsSupportingBrowsersAsync = getCustomTabsSupportingBrowsersAsync;\n  exports.mayInitWithUrlAsync = mayInitWithUrlAsync;\n  exports.maybeCompleteAuthSession = maybeCompleteAuthSession;\n  exports.openAuthSessionAsync = openAuthSessionAsync;\n  exports.openBrowserAsync = openBrowserAsync;\n  exports.warmUpAsync = warmUpAsync;\n  var _expoModulesCore = require(_dependencyMap[1], \"expo-modules-core\");\n  var _AppState = _interopRequireDefault(require(_dependencyMap[2], \"react-native-web/dist/exports/AppState\"));\n  var _Linking = _interopRequireDefault(require(_dependencyMap[3], \"react-native-web/dist/exports/Linking\"));\n  var _Platform = _interopRequireDefault(require(_dependencyMap[4], \"react-native-web/dist/exports/Platform\"));\n  var _processColor = _interopRequireDefault(require(_dependencyMap[5], \"react-native-web/dist/exports/processColor\"));\n  var _ExpoWebBrowser = _interopRequireDefault(require(_dependencyMap[6], \"./ExpoWebBrowser\"));\n  var _WebBrowser = require(_dependencyMap[7], \"./WebBrowser.types\");\n  const emptyCustomTabsPackages = {\n    defaultBrowserPackage: undefined,\n    preferredBrowserPackage: undefined,\n    browserPackages: [],\n    servicePackages: []\n  };\n  // @needsAudit\n  /**\n   * Returns a list of applications package names supporting Custom Tabs, Custom Tabs\n   * service, user chosen and preferred one. This may not be fully reliable, since it uses\n   * `PackageManager.getResolvingActivities` under the hood. (For example, some browsers might not be\n   * present in browserPackages list once another browser is set to default.)\n   *\n   * @return The promise which fulfils with [`WebBrowserCustomTabsResults`](#webbrowsercustomtabsresults) object.\n   * @platform android\n   */\n  async function getCustomTabsSupportingBrowsersAsync() {\n    if (!_ExpoWebBrowser.default.getCustomTabsSupportingBrowsersAsync) {\n      throw new _expoModulesCore.UnavailabilityError('WebBrowser', 'getCustomTabsSupportingBrowsersAsync');\n    }\n    if (_Platform.default.OS !== 'android') {\n      return emptyCustomTabsPackages;\n    } else {\n      return await _ExpoWebBrowser.default.getCustomTabsSupportingBrowsersAsync();\n    }\n  }\n  // @needsAudit\n  /**\n   * This method calls `warmUp` method on [CustomTabsClient](https://developer.android.com/reference/android/support/customtabs/CustomTabsClient.html#warmup(long))\n   * for specified package.\n   *\n   * @param browserPackage Package of browser to be warmed up. If not set, preferred browser will be warmed.\n   *\n   * @return A promise which fulfils with `WebBrowserWarmUpResult` object.\n   * @platform android\n   */\n  async function warmUpAsync(browserPackage) {\n    if (!_ExpoWebBrowser.default.warmUpAsync) {\n      throw new _expoModulesCore.UnavailabilityError('WebBrowser', 'warmUpAsync');\n    }\n    if (_Platform.default.OS !== 'android') {\n      return {};\n    } else {\n      return await _ExpoWebBrowser.default.warmUpAsync(browserPackage);\n    }\n  }\n  // @needsAudit\n  /**\n   * This method initiates (if needed) [CustomTabsSession](https://developer.android.com/reference/android/support/customtabs/CustomTabsSession.html#maylaunchurl)\n   * and calls its `mayLaunchUrl` method for browser specified by the package.\n   *\n   * @param url The url of page that is likely to be loaded first when opening browser.\n   * @param browserPackage Package of browser to be informed. If not set, preferred\n   * browser will be used.\n   *\n   * @return A promise which fulfils with `WebBrowserMayInitWithUrlResult` object.\n   * @platform android\n   */\n  async function mayInitWithUrlAsync(url, browserPackage) {\n    if (!_ExpoWebBrowser.default.mayInitWithUrlAsync) {\n      throw new _expoModulesCore.UnavailabilityError('WebBrowser', 'mayInitWithUrlAsync');\n    }\n    if (_Platform.default.OS !== 'android') {\n      return {};\n    } else {\n      return await _ExpoWebBrowser.default.mayInitWithUrlAsync(url, browserPackage);\n    }\n  }\n  // @needsAudit\n  /**\n   * This methods removes all bindings to services created by [`warmUpAsync`](#webbrowserwarmupasyncbrowserpackage)\n   * or [`mayInitWithUrlAsync`](#webbrowsermayinitwithurlasyncurl-browserpackage). You should call\n   * this method once you don't need them to avoid potential memory leaks. However, those binding\n   * would be cleared once your application is destroyed, which might be sufficient in most cases.\n   *\n   * @param browserPackage Package of browser to be cooled. If not set, preferred browser will be used.\n   *\n   * @return The promise which fulfils with ` WebBrowserCoolDownResult` when cooling is performed, or\n   * an empty object when there was no connection to be dismissed.\n   * @platform android\n   */\n  async function coolDownAsync(browserPackage) {\n    if (!_ExpoWebBrowser.default.coolDownAsync) {\n      throw new _expoModulesCore.UnavailabilityError('WebBrowser', 'coolDownAsync');\n    }\n    if (_Platform.default.OS !== 'android') {\n      return {};\n    } else {\n      return await _ExpoWebBrowser.default.coolDownAsync(browserPackage);\n    }\n  }\n  // @needsAudit\n  /**\n   * Opens the url with Safari in a modal on iOS using [`SFSafariViewController`](https://developer.apple.com/documentation/safariservices/sfsafariviewcontroller),\n   * and Chrome in a new [custom tab](https://developer.chrome.com/multidevice/android/customtabs)\n   * on Android. On iOS, the modal Safari will not share cookies with the system Safari. If you need\n   * this, use [`openAuthSessionAsync`](#webbrowseropenauthsessionasyncurl-redirecturl-options).\n   *\n   * @param url The url to open in the web browser.\n   * @param browserParams A dictionary of key-value pairs.\n   *\n   * @return The promise behaves differently based on the platform.\n   * On Android promise resolves with `{ type: 'opened' }` if we were able to open browser.\n   * On iOS:\n   * - If the user closed the web browser, the Promise resolves with `{ type: 'cancel' }`.\n   * - If the browser is closed using [`dismissBrowser`](#webbrowserdismissbrowser), the Promise resolves with `{ type: 'dismiss' }`.\n   */\n  async function openBrowserAsync(url, browserParams = {}) {\n    if (!_ExpoWebBrowser.default.openBrowserAsync) {\n      throw new _expoModulesCore.UnavailabilityError('WebBrowser', 'openBrowserAsync');\n    }\n    return await _ExpoWebBrowser.default.openBrowserAsync(url, _processOptions(browserParams));\n  }\n  // @needsAudit\n  /**\n   * Dismisses the presented web browser.\n   *\n   * @return The promise that resolves with `{ type: 'dismiss' }` on the successful attempt or throws an error if dismiss functionality is not available.\n   * @platform ios\n   */\n  function dismissBrowser() {\n    return _ExpoWebBrowser.default.dismissBrowser?.();\n  }\n  // @needsAudit\n  /**\n   * # On Android:\n   * This will be done using a \"custom Chrome tabs\" browser, [AppState](https://reactnative.dev/docs/appstate),\n   * and [Linking](./linking/) APIs.\n   *\n   * # On iOS:\n   * Opens the url with Safari in a modal using `ASWebAuthenticationSession`. The user will be asked\n   * whether to allow the app to authenticate using the given url.\n   * To handle redirection back to the mobile application, the redirect URI set in the authentication server\n   * has to use the protocol provided as the scheme in **app.json** [`expo.scheme`](./../config/app/#scheme).\n   * For example, `demo://` not `https://` protocol.\n   * Using `Linking.addEventListener` is not needed and can have side effects.\n   *\n   * # On web:\n   * > This API can only be used in a secure environment (localhost/https).\n   * to test this. Otherwise, an error with code [`ERR_WEB_BROWSER_CRYPTO`](#err_web_browser_crypto) will be thrown.\n   * This will use the browser's [`window.open()`](https://developer.mozilla.org/en-US/docs/Web/API/Window/open) API.\n   * - _Desktop_: This will create a new web popup window in the browser that can be closed later using `WebBrowser.maybeCompleteAuthSession()`.\n   * - _Mobile_: This will open a new tab in the browser which can be closed using `WebBrowser.maybeCompleteAuthSession()`.\n   *\n   * How this works on web:\n   * - A crypto state will be created for verifying the redirect.\n   *   - This means you need to run with `npx expo start --https`\n   * - The state will be added to the window's `localstorage`. This ensures that auth cannot complete\n   *   unless it's done from a page running with the same origin as it was started.\n   *   Ex: if `openAuthSessionAsync` is invoked on `https://localhost:19006`, then `maybeCompleteAuthSession`\n   *   must be invoked on a page hosted from the origin `https://localhost:19006`. Using a different\n   *   website, or even a different host like `https://128.0.0.*:19006` for example will not work.\n   * - A timer will be started to check for every 1000 milliseconds (1 second) to detect if the window\n   *   has been closed by the user. If this happens then a promise will resolve with `{ type: 'dismiss' }`.\n   *\n   * > On mobile web, Chrome and Safari will block any call to [`window.open()`](https://developer.mozilla.org/en-US/docs/Web/API/Window/open)\n   * which takes too long to fire after a user interaction. This method must be invoked immediately\n   * after a user interaction. If the event is blocked, an error with code [`ERR_WEB_BROWSER_BLOCKED`](#err_web_browser_blocked) will be thrown.\n   *\n   * @param url The url to open in the web browser. This should be a login page.\n   * @param redirectUrl _Optional_ - The url to deep link back into your app.\n   * On web, this defaults to the output of [`Linking.createURL(\"\")`](./linking/#linkingcreateurlpath-namedparameters).\n   * @param options _Optional_ - An object extending the [`WebBrowserOpenOptions`](#webbrowseropenoptions).\n   * If there is no native AuthSession implementation available (which is the case on Android)\n   * these params will be used in the browser polyfill. If there is a native AuthSession implementation,\n   * these params will be ignored.\n   *\n   * @return\n   * - If the user does not permit the application to authenticate with the given url, the Promise fulfills with `{ type: 'cancel' }` object.\n   * - If the user closed the web browser, the Promise fulfills with `{ type: 'cancel' }` object.\n   * - If the browser is closed using [`dismissBrowser`](#webbrowserdismissbrowser),\n   * the Promise fulfills with `{ type: 'dismiss' }` object.\n   */\n  async function openAuthSessionAsync(url, redirectUrl, options = {}) {\n    if (_authSessionIsNativelySupported()) {\n      if (!_ExpoWebBrowser.default.openAuthSessionAsync) {\n        throw new _expoModulesCore.UnavailabilityError('WebBrowser', 'openAuthSessionAsync');\n      }\n      if (['ios', 'macos', 'web'].includes(_Platform.default.OS)) {\n        return _ExpoWebBrowser.default.openAuthSessionAsync(url, redirectUrl, _processOptions(options));\n      }\n      return _ExpoWebBrowser.default.openAuthSessionAsync(url, redirectUrl);\n    } else {\n      return _openAuthSessionPolyfillAsync(url, redirectUrl, options);\n    }\n  }\n  /**\n   * Dismisses the current authentication session. On web, it will close the popup window associated with auth process.\n   *\n   * @return The `void` on the successful attempt or throws an error if dismiss functionality is not available.\n   *\n   * @platform ios\n   * @platform web\n   */\n  function dismissAuthSession() {\n    if (_authSessionIsNativelySupported()) {\n      if (!_ExpoWebBrowser.default.dismissAuthSession) {\n        throw new _expoModulesCore.UnavailabilityError('WebBrowser', 'dismissAuthSession');\n      }\n      _ExpoWebBrowser.default.dismissAuthSession();\n    } else {\n      if (!_ExpoWebBrowser.default.dismissBrowser) {\n        throw new _expoModulesCore.UnavailabilityError('WebBrowser', 'dismissBrowser');\n      }\n      _ExpoWebBrowser.default.dismissBrowser();\n    }\n  }\n  // @needsAudit\n  /**\n   * Possibly completes an authentication session on web in a window popup. The method\n   * should be invoked on the page that the window redirects to.\n   *\n   * @param options\n   *\n   * @return Returns an object with message about why the redirect failed or succeeded:\n   *\n   * If `type` is set to `failed`, the reason depends on the message:\n   * - `Not supported on this platform`: If the platform doesn't support this method (Android, iOS).\n   * - `Cannot use expo-web-browser in a non-browser environment`: If the code was executed in an SSR\n   *   or node environment.\n   * - `No auth session is currently in progress`: (the cached state wasn't found in local storage).\n   *   This can happen if the window redirects to an origin (website) that is different to the initial\n   *   website origin. If this happens in development, it may be because the auth started on localhost\n   *   and finished on your computer port (Ex: `128.0.0.*`). This is controlled by the `redirectUrl`\n   *   and `returnUrl`.\n   * - `Current URL \"<URL>\" and original redirect URL \"<URL>\" do not match`: This can occur when the\n   *   redirect URL doesn't match what was initial defined as the `returnUrl`. You can skip this test\n   *   in development by passing `{ skipRedirectCheck: true }` to the function.\n   *\n   * If `type` is set to `success`, the parent window will attempt to close the child window immediately.\n   *\n   * If the error `ERR_WEB_BROWSER_REDIRECT` was thrown, it may mean that the parent window was\n   * reloaded before the auth was completed. In this case you'll need to close the child window manually.\n   *\n   * @platform web\n   */\n  function maybeCompleteAuthSession(options = {}) {\n    if (_ExpoWebBrowser.default.maybeCompleteAuthSession) {\n      return _ExpoWebBrowser.default.maybeCompleteAuthSession(options);\n    }\n    return {\n      type: 'failed',\n      message: 'Not supported on this platform'\n    };\n  }\n  function _processOptions(options) {\n    return Object.assign({}, options, {\n      controlsColor: (0, _processColor.default)(options.controlsColor),\n      toolbarColor: (0, _processColor.default)(options.toolbarColor),\n      secondaryToolbarColor: (0, _processColor.default)(options.secondaryToolbarColor)\n    });\n  }\n  /* Android polyfill for ASWebAuthenticationSession flow */\n  function _authSessionIsNativelySupported() {\n    return _Platform.default.OS !== 'android';\n  }\n  let _redirectSubscription = null;\n  /*\n   * openBrowserAsync on Android doesn't wait until closed, so we need to polyfill\n   * it with AppState\n   */\n  // Store the `resolve` function from a Promise to fire when the AppState\n  // returns to active\n  let _onWebBrowserCloseAndroid = null;\n  // If the initial AppState.currentState is null, we assume that the first call to\n  // AppState#change event is not actually triggered by a real change,\n  // is triggered instead by the bridge capturing the current state\n  // (https://reactnative.dev/docs/appstate#basic-usage)\n  let _isAppStateAvailable = _AppState.default.currentState !== null;\n  function _onAppStateChangeAndroid(state) {\n    if (!_isAppStateAvailable) {\n      _isAppStateAvailable = true;\n      return;\n    }\n    if (state === 'active' && _onWebBrowserCloseAndroid) {\n      _onWebBrowserCloseAndroid();\n    }\n  }\n  async function _openBrowserAndWaitAndroidAsync(startUrl, browserParams = {}) {\n    const appStateChangedToActive = new Promise(resolve => {\n      _onWebBrowserCloseAndroid = resolve;\n    });\n    const stateChangeSubscription = _AppState.default.addEventListener('change', _onAppStateChangeAndroid);\n    let result = {\n      type: _WebBrowser.WebBrowserResultType.CANCEL\n    };\n    let type = null;\n    try {\n      ({\n        type\n      } = await openBrowserAsync(startUrl, browserParams));\n    } catch (e) {\n      stateChangeSubscription.remove();\n      _onWebBrowserCloseAndroid = null;\n      throw e;\n    }\n    if (type === 'opened') {\n      await appStateChangedToActive;\n      result = {\n        type: _WebBrowser.WebBrowserResultType.DISMISS\n      };\n    }\n    stateChangeSubscription.remove();\n    _onWebBrowserCloseAndroid = null;\n    return result;\n  }\n  async function _openAuthSessionPolyfillAsync(startUrl, returnUrl, browserParams = {}) {\n    if (_redirectSubscription) {\n      throw new Error(`The WebBrowser's auth session is in an invalid state with a redirect handler set when it should not be`);\n    }\n    if (_onWebBrowserCloseAndroid) {\n      throw new Error(`WebBrowser is already open, only one can be open at a time`);\n    }\n    try {\n      if (_Platform.default.OS === 'android') {\n        return await Promise.race([_openBrowserAndWaitAndroidAsync(startUrl, browserParams), _waitForRedirectAsync(returnUrl)]);\n      } else {\n        return await Promise.race([openBrowserAsync(startUrl, browserParams), _waitForRedirectAsync(returnUrl)]);\n      }\n    } finally {\n      // We can't dismiss the browser on Android, only call this when it's available.\n      // Users on Android need to manually press the 'x' button in Chrome Custom Tabs, sadly.\n      if (_ExpoWebBrowser.default.dismissBrowser) {\n        _ExpoWebBrowser.default.dismissBrowser();\n      }\n      _stopWaitingForRedirect();\n    }\n  }\n  function _stopWaitingForRedirect() {\n    if (!_redirectSubscription) {\n      throw new Error(`The WebBrowser auth session is in an invalid state with no redirect handler when one should be set`);\n    }\n    _redirectSubscription.remove();\n    _redirectSubscription = null;\n  }\n  function _waitForRedirectAsync(returnUrl) {\n    // Note that this Promise never resolves when `returnUrl` is nullish\n    return new Promise(resolve => {\n      const redirectHandler = event => {\n        if (returnUrl && event.url.startsWith(returnUrl)) {\n          resolve({\n            url: event.url,\n            type: 'success'\n          });\n        }\n      };\n      _redirectSubscription = _Linking.default.addEventListener('url', redirectHandler);\n    });\n  }\n});","lineCount":383,"map":[[27,2,1,0],[27,6,1,0,"_expoModulesCore"],[27,22,1,0],[27,25,1,0,"require"],[27,32,1,0],[27,33,1,0,"_dependencyMap"],[27,47,1,0],[28,2,1,56],[28,6,1,56,"_AppState"],[28,15,1,56],[28,18,1,56,"_interopRequireDefault"],[28,40,1,56],[28,41,1,56,"require"],[28,48,1,56],[28,49,1,56,"_dependencyMap"],[28,63,1,56],[29,2,1,56],[29,6,1,56,"_Linking"],[29,14,1,56],[29,17,1,56,"_interopRequireDefault"],[29,39,1,56],[29,40,1,56,"require"],[29,47,1,56],[29,48,1,56,"_dependencyMap"],[29,62,1,56],[30,2,1,56],[30,6,1,56,"_Platform"],[30,15,1,56],[30,18,1,56,"_interopRequireDefault"],[30,40,1,56],[30,41,1,56,"require"],[30,48,1,56],[30,49,1,56,"_dependencyMap"],[30,63,1,56],[31,2,1,56],[31,6,1,56,"_processColor"],[31,19,1,56],[31,22,1,56,"_interopRequireDefault"],[31,44,1,56],[31,45,1,56,"require"],[31,52,1,56],[31,53,1,56,"_dependencyMap"],[31,67,1,56],[32,2,3,0],[32,6,3,0,"_ExpoWebBrowser"],[32,21,3,0],[32,24,3,0,"_interopRequireDefault"],[32,46,3,0],[32,47,3,0,"require"],[32,54,3,0],[32,55,3,0,"_dependencyMap"],[32,69,3,0],[33,2,4,0],[33,6,4,0,"_WebBrowser"],[33,17,4,0],[33,20,4,0,"require"],[33,27,4,0],[33,28,4,0,"_dependencyMap"],[33,42,4,0],[34,2,6,0],[34,8,6,6,"emptyCustomTabsPackages"],[34,31,6,29],[34,34,6,32],[35,4,7,4,"defaultBrowserPackage"],[35,25,7,25],[35,27,7,27,"undefined"],[35,36,7,36],[36,4,8,4,"preferredBrowserPackage"],[36,27,8,27],[36,29,8,29,"undefined"],[36,38,8,38],[37,4,9,4,"browserPackages"],[37,19,9,19],[37,21,9,21],[37,23,9,23],[38,4,10,4,"servicePackages"],[38,19,10,19],[38,21,10,21],[39,2,11,0],[39,3,11,1],[40,2,12,0],[41,2,13,0],[42,0,14,0],[43,0,15,0],[44,0,16,0],[45,0,17,0],[46,0,18,0],[47,0,19,0],[48,0,20,0],[49,0,21,0],[50,2,22,7],[50,17,22,22,"getCustomTabsSupportingBrowsersAsync"],[50,53,22,58,"getCustomTabsSupportingBrowsersAsync"],[50,54,22,58],[50,56,22,61],[51,4,23,4],[51,8,23,8],[51,9,23,9,"ExponentWebBrowser"],[51,32,23,27],[51,33,23,28,"getCustomTabsSupportingBrowsersAsync"],[51,69,23,64],[51,71,23,66],[52,6,24,8],[52,12,24,14],[52,16,24,18,"UnavailabilityError"],[52,52,24,37],[52,53,24,38],[52,65,24,50],[52,67,24,52],[52,105,24,90],[52,106,24,91],[53,4,25,4],[54,4,26,4],[54,8,26,8,"Platform"],[54,25,26,16],[54,26,26,17,"OS"],[54,28,26,19],[54,33,26,24],[54,42,26,33],[54,44,26,35],[55,6,27,8],[55,13,27,15,"emptyCustomTabsPackages"],[55,36,27,38],[56,4,28,4],[56,5,28,5],[56,11,29,9],[57,6,30,8],[57,13,30,15],[57,19,30,21,"ExponentWebBrowser"],[57,42,30,39],[57,43,30,40,"getCustomTabsSupportingBrowsersAsync"],[57,79,30,76],[57,80,30,77],[57,81,30,78],[58,4,31,4],[59,2,32,0],[60,2,33,0],[61,2,34,0],[62,0,35,0],[63,0,36,0],[64,0,37,0],[65,0,38,0],[66,0,39,0],[67,0,40,0],[68,0,41,0],[69,0,42,0],[70,2,43,7],[70,17,43,22,"warmUpAsync"],[70,28,43,33,"warmUpAsync"],[70,29,43,34,"browserPackage"],[70,43,43,48],[70,45,43,50],[71,4,44,4],[71,8,44,8],[71,9,44,9,"ExponentWebBrowser"],[71,32,44,27],[71,33,44,28,"warmUpAsync"],[71,44,44,39],[71,46,44,41],[72,6,45,8],[72,12,45,14],[72,16,45,18,"UnavailabilityError"],[72,52,45,37],[72,53,45,38],[72,65,45,50],[72,67,45,52],[72,80,45,65],[72,81,45,66],[73,4,46,4],[74,4,47,4],[74,8,47,8,"Platform"],[74,25,47,16],[74,26,47,17,"OS"],[74,28,47,19],[74,33,47,24],[74,42,47,33],[74,44,47,35],[75,6,48,8],[75,13,48,15],[75,14,48,16],[75,15,48,17],[76,4,49,4],[76,5,49,5],[76,11,50,9],[77,6,51,8],[77,13,51,15],[77,19,51,21,"ExponentWebBrowser"],[77,42,51,39],[77,43,51,40,"warmUpAsync"],[77,54,51,51],[77,55,51,52,"browserPackage"],[77,69,51,66],[77,70,51,67],[78,4,52,4],[79,2,53,0],[80,2,54,0],[81,2,55,0],[82,0,56,0],[83,0,57,0],[84,0,58,0],[85,0,59,0],[86,0,60,0],[87,0,61,0],[88,0,62,0],[89,0,63,0],[90,0,64,0],[91,0,65,0],[92,2,66,7],[92,17,66,22,"mayInitWithUrlAsync"],[92,36,66,41,"mayInitWithUrlAsync"],[92,37,66,42,"url"],[92,40,66,45],[92,42,66,47,"browserPackage"],[92,56,66,61],[92,58,66,63],[93,4,67,4],[93,8,67,8],[93,9,67,9,"ExponentWebBrowser"],[93,32,67,27],[93,33,67,28,"mayInitWithUrlAsync"],[93,52,67,47],[93,54,67,49],[94,6,68,8],[94,12,68,14],[94,16,68,18,"UnavailabilityError"],[94,52,68,37],[94,53,68,38],[94,65,68,50],[94,67,68,52],[94,88,68,73],[94,89,68,74],[95,4,69,4],[96,4,70,4],[96,8,70,8,"Platform"],[96,25,70,16],[96,26,70,17,"OS"],[96,28,70,19],[96,33,70,24],[96,42,70,33],[96,44,70,35],[97,6,71,8],[97,13,71,15],[97,14,71,16],[97,15,71,17],[98,4,72,4],[98,5,72,5],[98,11,73,9],[99,6,74,8],[99,13,74,15],[99,19,74,21,"ExponentWebBrowser"],[99,42,74,39],[99,43,74,40,"mayInitWithUrlAsync"],[99,62,74,59],[99,63,74,60,"url"],[99,66,74,63],[99,68,74,65,"browserPackage"],[99,82,74,79],[99,83,74,80],[100,4,75,4],[101,2,76,0],[102,2,77,0],[103,2,78,0],[104,0,79,0],[105,0,80,0],[106,0,81,0],[107,0,82,0],[108,0,83,0],[109,0,84,0],[110,0,85,0],[111,0,86,0],[112,0,87,0],[113,0,88,0],[114,0,89,0],[115,2,90,7],[115,17,90,22,"coolDownAsync"],[115,30,90,35,"coolDownAsync"],[115,31,90,36,"browserPackage"],[115,45,90,50],[115,47,90,52],[116,4,91,4],[116,8,91,8],[116,9,91,9,"ExponentWebBrowser"],[116,32,91,27],[116,33,91,28,"coolDownAsync"],[116,46,91,41],[116,48,91,43],[117,6,92,8],[117,12,92,14],[117,16,92,18,"UnavailabilityError"],[117,52,92,37],[117,53,92,38],[117,65,92,50],[117,67,92,52],[117,82,92,67],[117,83,92,68],[118,4,93,4],[119,4,94,4],[119,8,94,8,"Platform"],[119,25,94,16],[119,26,94,17,"OS"],[119,28,94,19],[119,33,94,24],[119,42,94,33],[119,44,94,35],[120,6,95,8],[120,13,95,15],[120,14,95,16],[120,15,95,17],[121,4,96,4],[121,5,96,5],[121,11,97,9],[122,6,98,8],[122,13,98,15],[122,19,98,21,"ExponentWebBrowser"],[122,42,98,39],[122,43,98,40,"coolDownAsync"],[122,56,98,53],[122,57,98,54,"browserPackage"],[122,71,98,68],[122,72,98,69],[123,4,99,4],[124,2,100,0],[125,2,101,0],[126,2,102,0],[127,0,103,0],[128,0,104,0],[129,0,105,0],[130,0,106,0],[131,0,107,0],[132,0,108,0],[133,0,109,0],[134,0,110,0],[135,0,111,0],[136,0,112,0],[137,0,113,0],[138,0,114,0],[139,0,115,0],[140,0,116,0],[141,2,117,7],[141,17,117,22,"openBrowserAsync"],[141,33,117,38,"openBrowserAsync"],[141,34,117,39,"url"],[141,37,117,42],[141,39,117,44,"browserParams"],[141,52,117,57],[141,55,117,60],[141,56,117,61],[141,57,117,62],[141,59,117,64],[142,4,118,4],[142,8,118,8],[142,9,118,9,"ExponentWebBrowser"],[142,32,118,27],[142,33,118,28,"openBrowserAsync"],[142,49,118,44],[142,51,118,46],[143,6,119,8],[143,12,119,14],[143,16,119,18,"UnavailabilityError"],[143,52,119,37],[143,53,119,38],[143,65,119,50],[143,67,119,52],[143,85,119,70],[143,86,119,71],[144,4,120,4],[145,4,121,4],[145,11,121,11],[145,17,121,17,"ExponentWebBrowser"],[145,40,121,35],[145,41,121,36,"openBrowserAsync"],[145,57,121,52],[145,58,121,53,"url"],[145,61,121,56],[145,63,121,58,"_processOptions"],[145,78,121,73],[145,79,121,74,"browserParams"],[145,92,121,87],[145,93,121,88],[145,94,121,89],[146,2,122,0],[147,2,123,0],[148,2,124,0],[149,0,125,0],[150,0,126,0],[151,0,127,0],[152,0,128,0],[153,0,129,0],[154,2,130,7],[154,11,130,16,"dismissBrowser"],[154,25,130,30,"dismissBrowser"],[154,26,130,30],[154,28,130,33],[155,4,131,4],[155,11,131,11,"ExponentWebBrowser"],[155,34,131,29],[155,35,131,30,"dismissBrowser"],[155,49,131,44],[155,52,131,47],[155,53,131,48],[156,2,132,0],[157,2,133,0],[158,2,134,0],[159,0,135,0],[160,0,136,0],[161,0,137,0],[162,0,138,0],[163,0,139,0],[164,0,140,0],[165,0,141,0],[166,0,142,0],[167,0,143,0],[168,0,144,0],[169,0,145,0],[170,0,146,0],[171,0,147,0],[172,0,148,0],[173,0,149,0],[174,0,150,0],[175,0,151,0],[176,0,152,0],[177,0,153,0],[178,0,154,0],[179,0,155,0],[180,0,156,0],[181,0,157,0],[182,0,158,0],[183,0,159,0],[184,0,160,0],[185,0,161,0],[186,0,162,0],[187,0,163,0],[188,0,164,0],[189,0,165,0],[190,0,166,0],[191,0,167,0],[192,0,168,0],[193,0,169,0],[194,0,170,0],[195,0,171,0],[196,0,172,0],[197,0,173,0],[198,0,174,0],[199,0,175,0],[200,0,176,0],[201,0,177,0],[202,0,178,0],[203,0,179,0],[204,0,180,0],[205,0,181,0],[206,0,182,0],[207,2,183,7],[207,17,183,22,"openAuthSessionAsync"],[207,37,183,42,"openAuthSessionAsync"],[207,38,183,43,"url"],[207,41,183,46],[207,43,183,48,"redirectUrl"],[207,54,183,59],[207,56,183,61,"options"],[207,63,183,68],[207,66,183,71],[207,67,183,72],[207,68,183,73],[207,70,183,75],[208,4,184,4],[208,8,184,8,"_authSessionIsNativelySupported"],[208,39,184,39],[208,40,184,40],[208,41,184,41],[208,43,184,43],[209,6,185,8],[209,10,185,12],[209,11,185,13,"ExponentWebBrowser"],[209,34,185,31],[209,35,185,32,"openAuthSessionAsync"],[209,55,185,52],[209,57,185,54],[210,8,186,12],[210,14,186,18],[210,18,186,22,"UnavailabilityError"],[210,54,186,41],[210,55,186,42],[210,67,186,54],[210,69,186,56],[210,91,186,78],[210,92,186,79],[211,6,187,8],[212,6,188,8],[212,10,188,12],[212,11,188,13],[212,16,188,18],[212,18,188,20],[212,25,188,27],[212,27,188,29],[212,32,188,34],[212,33,188,35],[212,34,188,36,"includes"],[212,42,188,44],[212,43,188,45,"Platform"],[212,60,188,53],[212,61,188,54,"OS"],[212,63,188,56],[212,64,188,57],[212,66,188,59],[213,8,189,12],[213,15,189,19,"ExponentWebBrowser"],[213,38,189,37],[213,39,189,38,"openAuthSessionAsync"],[213,59,189,58],[213,60,189,59,"url"],[213,63,189,62],[213,65,189,64,"redirectUrl"],[213,76,189,75],[213,78,189,77,"_processOptions"],[213,93,189,92],[213,94,189,93,"options"],[213,101,189,100],[213,102,189,101],[213,103,189,102],[214,6,190,8],[215,6,191,8],[215,13,191,15,"ExponentWebBrowser"],[215,36,191,33],[215,37,191,34,"openAuthSessionAsync"],[215,57,191,54],[215,58,191,55,"url"],[215,61,191,58],[215,63,191,60,"redirectUrl"],[215,74,191,71],[215,75,191,72],[216,4,192,4],[216,5,192,5],[216,11,193,9],[217,6,194,8],[217,13,194,15,"_openAuthSessionPolyfillAsync"],[217,42,194,44],[217,43,194,45,"url"],[217,46,194,48],[217,48,194,50,"redirectUrl"],[217,59,194,61],[217,61,194,63,"options"],[217,68,194,70],[217,69,194,71],[218,4,195,4],[219,2,196,0],[220,2,197,0],[221,0,198,0],[222,0,199,0],[223,0,200,0],[224,0,201,0],[225,0,202,0],[226,0,203,0],[227,0,204,0],[228,2,205,7],[228,11,205,16,"dismissAuthSession"],[228,29,205,34,"dismissAuthSession"],[228,30,205,34],[228,32,205,37],[229,4,206,4],[229,8,206,8,"_authSessionIsNativelySupported"],[229,39,206,39],[229,40,206,40],[229,41,206,41],[229,43,206,43],[230,6,207,8],[230,10,207,12],[230,11,207,13,"ExponentWebBrowser"],[230,34,207,31],[230,35,207,32,"dismissAuthSession"],[230,53,207,50],[230,55,207,52],[231,8,208,12],[231,14,208,18],[231,18,208,22,"UnavailabilityError"],[231,54,208,41],[231,55,208,42],[231,67,208,54],[231,69,208,56],[231,89,208,76],[231,90,208,77],[232,6,209,8],[233,6,210,8,"ExponentWebBrowser"],[233,29,210,26],[233,30,210,27,"dismissAuthSession"],[233,48,210,45],[233,49,210,46],[233,50,210,47],[234,4,211,4],[234,5,211,5],[234,11,212,9],[235,6,213,8],[235,10,213,12],[235,11,213,13,"ExponentWebBrowser"],[235,34,213,31],[235,35,213,32,"dismissBrowser"],[235,49,213,46],[235,51,213,48],[236,8,214,12],[236,14,214,18],[236,18,214,22,"UnavailabilityError"],[236,54,214,41],[236,55,214,42],[236,67,214,54],[236,69,214,56],[236,85,214,72],[236,86,214,73],[237,6,215,8],[238,6,216,8,"ExponentWebBrowser"],[238,29,216,26],[238,30,216,27,"dismissBrowser"],[238,44,216,41],[238,45,216,42],[238,46,216,43],[239,4,217,4],[240,2,218,0],[241,2,219,0],[242,2,220,0],[243,0,221,0],[244,0,222,0],[245,0,223,0],[246,0,224,0],[247,0,225,0],[248,0,226,0],[249,0,227,0],[250,0,228,0],[251,0,229,0],[252,0,230,0],[253,0,231,0],[254,0,232,0],[255,0,233,0],[256,0,234,0],[257,0,235,0],[258,0,236,0],[259,0,237,0],[260,0,238,0],[261,0,239,0],[262,0,240,0],[263,0,241,0],[264,0,242,0],[265,0,243,0],[266,0,244,0],[267,0,245,0],[268,0,246,0],[269,0,247,0],[270,2,248,7],[270,11,248,16,"maybeCompleteAuthSession"],[270,35,248,40,"maybeCompleteAuthSession"],[270,36,248,41,"options"],[270,43,248,48],[270,46,248,51],[270,47,248,52],[270,48,248,53],[270,50,248,55],[271,4,249,4],[271,8,249,8,"ExponentWebBrowser"],[271,31,249,26],[271,32,249,27,"maybeCompleteAuthSession"],[271,56,249,51],[271,58,249,53],[272,6,250,8],[272,13,250,15,"ExponentWebBrowser"],[272,36,250,33],[272,37,250,34,"maybeCompleteAuthSession"],[272,61,250,58],[272,62,250,59,"options"],[272,69,250,66],[272,70,250,67],[273,4,251,4],[274,4,252,4],[274,11,252,11],[275,6,252,13,"type"],[275,10,252,17],[275,12,252,19],[275,20,252,27],[276,6,252,29,"message"],[276,13,252,36],[276,15,252,38],[277,4,252,71],[277,5,252,72],[278,2,253,0],[279,2,254,0],[279,11,254,9,"_processOptions"],[279,26,254,24,"_processOptions"],[279,27,254,25,"options"],[279,34,254,32],[279,36,254,34],[280,4,255,4],[280,11,255,4,"Object"],[280,17,255,4],[280,18,255,4,"assign"],[280,24,255,4],[280,29,256,11,"options"],[280,36,256,18],[281,6,257,8,"controlsColor"],[281,19,257,21],[281,21,257,23],[281,25,257,23,"processColor"],[281,46,257,35],[281,48,257,36,"options"],[281,55,257,43],[281,56,257,44,"controlsColor"],[281,69,257,57],[281,70,257,58],[282,6,258,8,"toolbarColor"],[282,18,258,20],[282,20,258,22],[282,24,258,22,"processColor"],[282,45,258,34],[282,47,258,35,"options"],[282,54,258,42],[282,55,258,43,"toolbarColor"],[282,67,258,55],[282,68,258,56],[283,6,259,8,"secondaryToolbarColor"],[283,27,259,29],[283,29,259,31],[283,33,259,31,"processColor"],[283,54,259,43],[283,56,259,44,"options"],[283,63,259,51],[283,64,259,52,"secondaryToolbarColor"],[283,85,259,73],[284,4,259,74],[285,2,261,0],[286,2,262,0],[287,2,263,0],[287,11,263,9,"_authSessionIsNativelySupported"],[287,42,263,40,"_authSessionIsNativelySupported"],[287,43,263,40],[287,45,263,43],[288,4,264,4],[288,11,264,11,"Platform"],[288,28,264,19],[288,29,264,20,"OS"],[288,31,264,22],[288,36,264,27],[288,45,264,36],[289,2,265,0],[290,2,266,0],[290,6,266,4,"_redirectSubscription"],[290,27,266,25],[290,30,266,28],[290,34,266,32],[291,2,267,0],[292,0,268,0],[293,0,269,0],[294,0,270,0],[295,2,271,0],[296,2,272,0],[297,2,273,0],[297,6,273,4,"_onWebBrowserCloseAndroid"],[297,31,273,29],[297,34,273,32],[297,38,273,36],[298,2,274,0],[299,2,275,0],[300,2,276,0],[301,2,277,0],[302,2,278,0],[302,6,278,4,"_isAppStateAvailable"],[302,26,278,24],[302,29,278,27,"AppState"],[302,46,278,35],[302,47,278,36,"currentState"],[302,59,278,48],[302,64,278,53],[302,68,278,57],[303,2,279,0],[303,11,279,9,"_onAppStateChangeAndroid"],[303,35,279,33,"_onAppStateChangeAndroid"],[303,36,279,34,"state"],[303,41,279,39],[303,43,279,41],[304,4,280,4],[304,8,280,8],[304,9,280,9,"_isAppStateAvailable"],[304,29,280,29],[304,31,280,31],[305,6,281,8,"_isAppStateAvailable"],[305,26,281,28],[305,29,281,31],[305,33,281,35],[306,6,282,8],[307,4,283,4],[308,4,284,4],[308,8,284,8,"state"],[308,13,284,13],[308,18,284,18],[308,26,284,26],[308,30,284,30,"_onWebBrowserCloseAndroid"],[308,55,284,55],[308,57,284,57],[309,6,285,8,"_onWebBrowserCloseAndroid"],[309,31,285,33],[309,32,285,34],[309,33,285,35],[310,4,286,4],[311,2,287,0],[312,2,288,0],[312,17,288,15,"_openBrowserAndWaitAndroidAsync"],[312,48,288,46,"_openBrowserAndWaitAndroidAsync"],[312,49,288,47,"startUrl"],[312,57,288,55],[312,59,288,57,"browserParams"],[312,72,288,70],[312,75,288,73],[312,76,288,74],[312,77,288,75],[312,79,288,77],[313,4,289,4],[313,10,289,10,"appStateChangedToActive"],[313,33,289,33],[313,36,289,36],[313,40,289,40,"Promise"],[313,47,289,47],[313,48,289,49,"resolve"],[313,55,289,56],[313,59,289,61],[314,6,290,8,"_onWebBrowserCloseAndroid"],[314,31,290,33],[314,34,290,36,"resolve"],[314,41,290,43],[315,4,291,4],[315,5,291,5],[315,6,291,6],[316,4,292,4],[316,10,292,10,"stateChangeSubscription"],[316,33,292,33],[316,36,292,36,"AppState"],[316,53,292,44],[316,54,292,45,"addEventListener"],[316,70,292,61],[316,71,292,62],[316,79,292,70],[316,81,292,72,"_onAppStateChangeAndroid"],[316,105,292,96],[316,106,292,97],[317,4,293,4],[317,8,293,8,"result"],[317,14,293,14],[317,17,293,17],[318,6,293,19,"type"],[318,10,293,23],[318,12,293,25,"WebBrowserResultType"],[318,44,293,45],[318,45,293,46,"CANCEL"],[319,4,293,53],[319,5,293,54],[320,4,294,4],[320,8,294,8,"type"],[320,12,294,12],[320,15,294,15],[320,19,294,19],[321,4,295,4],[321,8,295,8],[322,6,296,8],[322,7,296,9],[323,8,296,11,"type"],[324,6,296,16],[324,7,296,17],[324,10,296,20],[324,16,296,26,"openBrowserAsync"],[324,32,296,42],[324,33,296,43,"startUrl"],[324,41,296,51],[324,43,296,53,"browserParams"],[324,56,296,66],[324,57,296,67],[325,4,297,4],[325,5,297,5],[325,6,298,4],[325,13,298,11,"e"],[325,14,298,12],[325,16,298,14],[326,6,299,8,"stateChangeSubscription"],[326,29,299,31],[326,30,299,32,"remove"],[326,36,299,38],[326,37,299,39],[326,38,299,40],[327,6,300,8,"_onWebBrowserCloseAndroid"],[327,31,300,33],[327,34,300,36],[327,38,300,40],[328,6,301,8],[328,12,301,14,"e"],[328,13,301,15],[329,4,302,4],[330,4,303,4],[330,8,303,8,"type"],[330,12,303,12],[330,17,303,17],[330,25,303,25],[330,27,303,27],[331,6,304,8],[331,12,304,14,"appStateChangedToActive"],[331,35,304,37],[332,6,305,8,"result"],[332,12,305,14],[332,15,305,17],[333,8,305,19,"type"],[333,12,305,23],[333,14,305,25,"WebBrowserResultType"],[333,46,305,45],[333,47,305,46,"DISMISS"],[334,6,305,54],[334,7,305,55],[335,4,306,4],[336,4,307,4,"stateChangeSubscription"],[336,27,307,27],[336,28,307,28,"remove"],[336,34,307,34],[336,35,307,35],[336,36,307,36],[337,4,308,4,"_onWebBrowserCloseAndroid"],[337,29,308,29],[337,32,308,32],[337,36,308,36],[338,4,309,4],[338,11,309,11,"result"],[338,17,309,17],[339,2,310,0],[340,2,311,0],[340,17,311,15,"_openAuthSessionPolyfillAsync"],[340,46,311,44,"_openAuthSessionPolyfillAsync"],[340,47,311,45,"startUrl"],[340,55,311,53],[340,57,311,55,"returnUrl"],[340,66,311,64],[340,68,311,66,"browserParams"],[340,81,311,79],[340,84,311,82],[340,85,311,83],[340,86,311,84],[340,88,311,86],[341,4,312,4],[341,8,312,8,"_redirectSubscription"],[341,29,312,29],[341,31,312,31],[342,6,313,8],[342,12,313,14],[342,16,313,18,"Error"],[342,21,313,23],[342,22,313,24],[342,126,313,128],[342,127,313,129],[343,4,314,4],[344,4,315,4],[344,8,315,8,"_onWebBrowserCloseAndroid"],[344,33,315,33],[344,35,315,35],[345,6,316,8],[345,12,316,14],[345,16,316,18,"Error"],[345,21,316,23],[345,22,316,24],[345,82,316,84],[345,83,316,85],[346,4,317,4],[347,4,318,4],[347,8,318,8],[348,6,319,8],[348,10,319,12,"Platform"],[348,27,319,20],[348,28,319,21,"OS"],[348,30,319,23],[348,35,319,28],[348,44,319,37],[348,46,319,39],[349,8,320,12],[349,15,320,19],[349,21,320,25,"Promise"],[349,28,320,32],[349,29,320,33,"race"],[349,33,320,37],[349,34,320,38],[349,35,321,16,"_openBrowserAndWaitAndroidAsync"],[349,66,321,47],[349,67,321,48,"startUrl"],[349,75,321,56],[349,77,321,58,"browserParams"],[349,90,321,71],[349,91,321,72],[349,93,322,16,"_waitForRedirectAsync"],[349,114,322,37],[349,115,322,38,"returnUrl"],[349,124,322,47],[349,125,322,48],[349,126,323,13],[349,127,323,14],[350,6,324,8],[350,7,324,9],[350,13,325,13],[351,8,326,12],[351,15,326,19],[351,21,326,25,"Promise"],[351,28,326,32],[351,29,326,33,"race"],[351,33,326,37],[351,34,326,38],[351,35,327,16,"openBrowserAsync"],[351,51,327,32],[351,52,327,33,"startUrl"],[351,60,327,41],[351,62,327,43,"browserParams"],[351,75,327,56],[351,76,327,57],[351,78,328,16,"_waitForRedirectAsync"],[351,99,328,37],[351,100,328,38,"returnUrl"],[351,109,328,47],[351,110,328,48],[351,111,329,13],[351,112,329,14],[352,6,330,8],[353,4,331,4],[353,5,331,5],[353,14,332,12],[354,6,333,8],[355,6,334,8],[356,6,335,8],[356,10,335,12,"ExponentWebBrowser"],[356,33,335,30],[356,34,335,31,"dismissBrowser"],[356,48,335,45],[356,50,335,47],[357,8,336,12,"ExponentWebBrowser"],[357,31,336,30],[357,32,336,31,"dismissBrowser"],[357,46,336,45],[357,47,336,46],[357,48,336,47],[358,6,337,8],[359,6,338,8,"_stopWaitingForRedirect"],[359,29,338,31],[359,30,338,32],[359,31,338,33],[360,4,339,4],[361,2,340,0],[362,2,341,0],[362,11,341,9,"_stopWaitingForRedirect"],[362,34,341,32,"_stopWaitingForRedirect"],[362,35,341,32],[362,37,341,35],[363,4,342,4],[363,8,342,8],[363,9,342,9,"_redirectSubscription"],[363,30,342,30],[363,32,342,32],[364,6,343,8],[364,12,343,14],[364,16,343,18,"Error"],[364,21,343,23],[364,22,343,24],[364,122,343,124],[364,123,343,125],[365,4,344,4],[366,4,345,4,"_redirectSubscription"],[366,25,345,25],[366,26,345,26,"remove"],[366,32,345,32],[366,33,345,33],[366,34,345,34],[367,4,346,4,"_redirectSubscription"],[367,25,346,25],[367,28,346,28],[367,32,346,32],[368,2,347,0],[369,2,348,0],[369,11,348,9,"_waitForRedirectAsync"],[369,32,348,30,"_waitForRedirectAsync"],[369,33,348,31,"returnUrl"],[369,42,348,40],[369,44,348,42],[370,4,349,4],[371,4,350,4],[371,11,350,11],[371,15,350,15,"Promise"],[371,22,350,22],[371,23,350,24,"resolve"],[371,30,350,31],[371,34,350,36],[372,6,351,8],[372,12,351,14,"redirectHandler"],[372,27,351,29],[372,30,351,33,"event"],[372,35,351,38],[372,39,351,43],[373,8,352,12],[373,12,352,16,"returnUrl"],[373,21,352,25],[373,25,352,29,"event"],[373,30,352,34],[373,31,352,35,"url"],[373,34,352,38],[373,35,352,39,"startsWith"],[373,45,352,49],[373,46,352,50,"returnUrl"],[373,55,352,59],[373,56,352,60],[373,58,352,62],[374,10,353,16,"resolve"],[374,17,353,23],[374,18,353,24],[375,12,353,26,"url"],[375,15,353,29],[375,17,353,31,"event"],[375,22,353,36],[375,23,353,37,"url"],[375,26,353,40],[376,12,353,42,"type"],[376,16,353,46],[376,18,353,48],[377,10,353,58],[377,11,353,59],[377,12,353,60],[378,8,354,12],[379,6,355,8],[379,7,355,9],[380,6,356,8,"_redirectSubscription"],[380,27,356,29],[380,30,356,32,"Linking"],[380,46,356,39],[380,47,356,40,"addEventListener"],[380,63,356,56],[380,64,356,57],[380,69,356,62],[380,71,356,64,"redirectHandler"],[380,86,356,79],[380,87,356,80],[381,4,357,4],[381,5,357,5],[381,6,357,6],[382,2,358,0],[383,0,358,1],[383,3]],"functionMap":{"names":["<global>","getCustomTabsSupportingBrowsersAsync","warmUpAsync","mayInitWithUrlAsync","coolDownAsync","openBrowserAsync","dismissBrowser","openAuthSessionAsync","dismissAuthSession","maybeCompleteAuthSession","_processOptions","_authSessionIsNativelySupported","_onAppStateChangeAndroid","_openBrowserAndWaitAndroidAsync","Promise$argument_0","_openAuthSessionPolyfillAsync","_stopWaitingForRedirect","_waitForRedirectAsync","redirectHandler"],"mappings":"AAA;OCqB;CDU;OEW;CFU;OGa;CHU;OIc;CJU;OKiB;CLK;OMQ;CNE;OOmD;CPa;OQS;CRa;OS8B;CTK;AUC;CVO;AWE;CXE;AYc;CZQ;AaC;gDCC;KDE;CbmB;AeC;Cf6B;AgBC;ChBM;AiBC;uBHE;gCIC;SJI;KGE;CjBC"}},"type":"js/module"}]}