{"dependencies":[],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.default = estimateDataURLDecodedBytes;\n  /**\n   * Estimate decoded byte length of a data:// URL *without* allocating large buffers.\n   * - For base64: compute exact decoded size using length and padding;\n   *               handle %XX at the character-count level (no string allocation).\n   * - For non-base64: use UTF-8 byteLength of the encoded body as a safe upper bound.\n   *\n   * @param {string} url\n   * @returns {number}\n   */\n  function estimateDataURLDecodedBytes(url) {\n    if (!url || typeof url !== 'string') return 0;\n    if (!url.startsWith('data:')) return 0;\n    const comma = url.indexOf(',');\n    if (comma < 0) return 0;\n    const meta = url.slice(5, comma);\n    const body = url.slice(comma + 1);\n    const isBase64 = /;base64/i.test(meta);\n    if (isBase64) {\n      let effectiveLen = body.length;\n      const len = body.length; // cache length\n\n      for (let i = 0; i < len; i++) {\n        if (body.charCodeAt(i) === 37 /* '%' */ && i + 2 < len) {\n          const a = body.charCodeAt(i + 1);\n          const b = body.charCodeAt(i + 2);\n          const isHex = (a >= 48 && a <= 57 || a >= 65 && a <= 70 || a >= 97 && a <= 102) && (b >= 48 && b <= 57 || b >= 65 && b <= 70 || b >= 97 && b <= 102);\n          if (isHex) {\n            effectiveLen -= 2;\n            i += 2;\n          }\n        }\n      }\n      let pad = 0;\n      let idx = len - 1;\n      const tailIsPct3D = j => j >= 2 && body.charCodeAt(j - 2) === 37 &&\n      // '%'\n      body.charCodeAt(j - 1) === 51 && (\n      // '3'\n      body.charCodeAt(j) === 68 || body.charCodeAt(j) === 100); // 'D' or 'd'\n\n      if (idx >= 0) {\n        if (body.charCodeAt(idx) === 61 /* '=' */) {\n          pad++;\n          idx--;\n        } else if (tailIsPct3D(idx)) {\n          pad++;\n          idx -= 3;\n        }\n      }\n      if (pad === 1 && idx >= 0) {\n        if (body.charCodeAt(idx) === 61 /* '=' */) {\n          pad++;\n        } else if (tailIsPct3D(idx)) {\n          pad++;\n        }\n      }\n      const groups = Math.floor(effectiveLen / 4);\n      const bytes = groups * 3 - (pad || 0);\n      return bytes > 0 ? bytes : 0;\n    }\n    return Buffer.byteLength(body, 'utf8');\n  }\n});","lineCount":68,"map":[[6,2,1,0],[7,0,2,0],[8,0,3,0],[9,0,4,0],[10,0,5,0],[11,0,6,0],[12,0,7,0],[13,0,8,0],[14,0,9,0],[15,2,10,15],[15,11,10,24,"estimateDataURLDecodedBytes"],[15,38,10,51,"estimateDataURLDecodedBytes"],[15,39,10,52,"url"],[15,42,10,55],[15,44,10,57],[16,4,11,2],[16,8,11,6],[16,9,11,7,"url"],[16,12,11,10],[16,16,11,14],[16,23,11,21,"url"],[16,26,11,24],[16,31,11,29],[16,39,11,37],[16,41,11,39],[16,48,11,46],[16,49,11,47],[17,4,12,2],[17,8,12,6],[17,9,12,7,"url"],[17,12,12,10],[17,13,12,11,"startsWith"],[17,23,12,21],[17,24,12,22],[17,31,12,29],[17,32,12,30],[17,34,12,32],[17,41,12,39],[17,42,12,40],[18,4,14,2],[18,10,14,8,"comma"],[18,15,14,13],[18,18,14,16,"url"],[18,21,14,19],[18,22,14,20,"indexOf"],[18,29,14,27],[18,30,14,28],[18,33,14,31],[18,34,14,32],[19,4,15,2],[19,8,15,6,"comma"],[19,13,15,11],[19,16,15,14],[19,17,15,15],[19,19,15,17],[19,26,15,24],[19,27,15,25],[20,4,17,2],[20,10,17,8,"meta"],[20,14,17,12],[20,17,17,15,"url"],[20,20,17,18],[20,21,17,19,"slice"],[20,26,17,24],[20,27,17,25],[20,28,17,26],[20,30,17,28,"comma"],[20,35,17,33],[20,36,17,34],[21,4,18,2],[21,10,18,8,"body"],[21,14,18,12],[21,17,18,15,"url"],[21,20,18,18],[21,21,18,19,"slice"],[21,26,18,24],[21,27,18,25,"comma"],[21,32,18,30],[21,35,18,33],[21,36,18,34],[21,37,18,35],[22,4,19,2],[22,10,19,8,"isBase64"],[22,18,19,16],[22,21,19,19],[22,31,19,29],[22,32,19,30,"test"],[22,36,19,34],[22,37,19,35,"meta"],[22,41,19,39],[22,42,19,40],[23,4,21,2],[23,8,21,6,"isBase64"],[23,16,21,14],[23,18,21,16],[24,6,22,4],[24,10,22,8,"effectiveLen"],[24,22,22,20],[24,25,22,23,"body"],[24,29,22,27],[24,30,22,28,"length"],[24,36,22,34],[25,6,23,4],[25,12,23,10,"len"],[25,15,23,13],[25,18,23,16,"body"],[25,22,23,20],[25,23,23,21,"length"],[25,29,23,27],[25,30,23,28],[25,31,23,29],[27,6,25,4],[27,11,25,9],[27,15,25,13,"i"],[27,16,25,14],[27,19,25,17],[27,20,25,18],[27,22,25,20,"i"],[27,23,25,21],[27,26,25,24,"len"],[27,29,25,27],[27,31,25,29,"i"],[27,32,25,30],[27,34,25,32],[27,36,25,34],[28,8,26,6],[28,12,26,10,"body"],[28,16,26,14],[28,17,26,15,"charCodeAt"],[28,27,26,25],[28,28,26,26,"i"],[28,29,26,27],[28,30,26,28],[28,35,26,33],[28,37,26,35],[28,38,26,36],[28,51,26,49,"i"],[28,52,26,50],[28,55,26,53],[28,56,26,54],[28,59,26,57,"len"],[28,62,26,60],[28,64,26,62],[29,10,27,8],[29,16,27,14,"a"],[29,17,27,15],[29,20,27,18,"body"],[29,24,27,22],[29,25,27,23,"charCodeAt"],[29,35,27,33],[29,36,27,34,"i"],[29,37,27,35],[29,40,27,38],[29,41,27,39],[29,42,27,40],[30,10,28,8],[30,16,28,14,"b"],[30,17,28,15],[30,20,28,18,"body"],[30,24,28,22],[30,25,28,23,"charCodeAt"],[30,35,28,33],[30,36,28,34,"i"],[30,37,28,35],[30,40,28,38],[30,41,28,39],[30,42,28,40],[31,10,29,8],[31,16,29,14,"isHex"],[31,21,29,19],[31,24,30,10],[31,25,30,12,"a"],[31,26,30,13],[31,30,30,17],[31,32,30,19],[31,36,30,23,"a"],[31,37,30,24],[31,41,30,28],[31,43,30,30],[31,47,30,36,"a"],[31,48,30,37],[31,52,30,41],[31,54,30,43],[31,58,30,47,"a"],[31,59,30,48],[31,63,30,52],[31,65,30,55],[31,69,30,60,"a"],[31,70,30,61],[31,74,30,65],[31,76,30,67],[31,80,30,71,"a"],[31,81,30,72],[31,85,30,76],[31,88,30,80],[31,94,31,12,"b"],[31,95,31,13],[31,99,31,17],[31,101,31,19],[31,105,31,23,"b"],[31,106,31,24],[31,110,31,28],[31,112,31,30],[31,116,31,36,"b"],[31,117,31,37],[31,121,31,41],[31,123,31,43],[31,127,31,47,"b"],[31,128,31,48],[31,132,31,52],[31,134,31,55],[31,138,31,60,"b"],[31,139,31,61],[31,143,31,65],[31,145,31,67],[31,149,31,71,"b"],[31,150,31,72],[31,154,31,76],[31,157,31,80],[31,158,31,81],[32,10,33,8],[32,14,33,12,"isHex"],[32,19,33,17],[32,21,33,19],[33,12,34,10,"effectiveLen"],[33,24,34,22],[33,28,34,26],[33,29,34,27],[34,12,35,10,"i"],[34,13,35,11],[34,17,35,15],[34,18,35,16],[35,10,36,8],[36,8,37,6],[37,6,38,4],[38,6,40,4],[38,10,40,8,"pad"],[38,13,40,11],[38,16,40,14],[38,17,40,15],[39,6,41,4],[39,10,41,8,"idx"],[39,13,41,11],[39,16,41,14,"len"],[39,19,41,17],[39,22,41,20],[39,23,41,21],[40,6,43,4],[40,12,43,10,"tailIsPct3D"],[40,23,43,21],[40,26,43,25,"j"],[40,27,43,26],[40,31,44,6,"j"],[40,32,44,7],[40,36,44,11],[40,37,44,12],[40,41,45,6,"body"],[40,45,45,10],[40,46,45,11,"charCodeAt"],[40,56,45,21],[40,57,45,22,"j"],[40,58,45,23],[40,61,45,26],[40,62,45,27],[40,63,45,28],[40,68,45,33],[40,70,45,35],[41,6,45,39],[42,6,46,6,"body"],[42,10,46,10],[42,11,46,11,"charCodeAt"],[42,21,46,21],[42,22,46,22,"j"],[42,23,46,23],[42,26,46,26],[42,27,46,27],[42,28,46,28],[42,33,46,33],[42,35,46,35],[43,6,46,39],[44,6,47,7,"body"],[44,10,47,11],[44,11,47,12,"charCodeAt"],[44,21,47,22],[44,22,47,23,"j"],[44,23,47,24],[44,24,47,25],[44,29,47,30],[44,31,47,32],[44,35,47,36,"body"],[44,39,47,40],[44,40,47,41,"charCodeAt"],[44,50,47,51],[44,51,47,52,"j"],[44,52,47,53],[44,53,47,54],[44,58,47,59],[44,61,47,62],[44,62,47,63],[44,63,47,64],[44,64,47,65],[46,6,49,4],[46,10,49,8,"idx"],[46,13,49,11],[46,17,49,15],[46,18,49,16],[46,20,49,18],[47,8,50,6],[47,12,50,10,"body"],[47,16,50,14],[47,17,50,15,"charCodeAt"],[47,27,50,25],[47,28,50,26,"idx"],[47,31,50,29],[47,32,50,30],[47,37,50,35],[47,39,50,37],[47,40,50,38],[47,51,50,49],[48,10,51,8,"pad"],[48,13,51,11],[48,15,51,13],[49,10,52,8,"idx"],[49,13,52,11],[49,15,52,13],[50,8,53,6],[50,9,53,7],[50,15,53,13],[50,19,53,17,"tailIsPct3D"],[50,30,53,28],[50,31,53,29,"idx"],[50,34,53,32],[50,35,53,33],[50,37,53,35],[51,10,54,8,"pad"],[51,13,54,11],[51,15,54,13],[52,10,55,8,"idx"],[52,13,55,11],[52,17,55,15],[52,18,55,16],[53,8,56,6],[54,6,57,4],[55,6,59,4],[55,10,59,8,"pad"],[55,13,59,11],[55,18,59,16],[55,19,59,17],[55,23,59,21,"idx"],[55,26,59,24],[55,30,59,28],[55,31,59,29],[55,33,59,31],[56,8,60,6],[56,12,60,10,"body"],[56,16,60,14],[56,17,60,15,"charCodeAt"],[56,27,60,25],[56,28,60,26,"idx"],[56,31,60,29],[56,32,60,30],[56,37,60,35],[56,39,60,37],[56,40,60,38],[56,51,60,49],[57,10,61,8,"pad"],[57,13,61,11],[57,15,61,13],[58,8,62,6],[58,9,62,7],[58,15,62,13],[58,19,62,17,"tailIsPct3D"],[58,30,62,28],[58,31,62,29,"idx"],[58,34,62,32],[58,35,62,33],[58,37,62,35],[59,10,63,8,"pad"],[59,13,63,11],[59,15,63,13],[60,8,64,6],[61,6,65,4],[62,6,67,4],[62,12,67,10,"groups"],[62,18,67,16],[62,21,67,19,"Math"],[62,25,67,23],[62,26,67,24,"floor"],[62,31,67,29],[62,32,67,30,"effectiveLen"],[62,44,67,42],[62,47,67,45],[62,48,67,46],[62,49,67,47],[63,6,68,4],[63,12,68,10,"bytes"],[63,17,68,15],[63,20,68,18,"groups"],[63,26,68,24],[63,29,68,27],[63,30,68,28],[63,34,68,32,"pad"],[63,37,68,35],[63,41,68,39],[63,42,68,40],[63,43,68,41],[64,6,69,4],[64,13,69,11,"bytes"],[64,18,69,16],[64,21,69,19],[64,22,69,20],[64,25,69,23,"bytes"],[64,30,69,28],[64,33,69,31],[64,34,69,32],[65,4,70,2],[66,4,72,2],[66,11,72,9,"Buffer"],[66,17,72,15],[66,18,72,16,"byteLength"],[66,28,72,26],[66,29,72,27,"body"],[66,33,72,31],[66,35,72,33],[66,41,72,39],[66,42,72,40],[67,2,73,0],[68,0,73,1],[68,3]],"functionMap":{"names":["<global>","estimateDataURLDecodedBytes","tailIsPct3D"],"mappings":"AAA;eCS;wBCiC;+DDI;CD0B"}},"type":"js/module"}]}