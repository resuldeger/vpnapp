{"dependencies":[],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.trackStream = exports.streamChunk = exports.readBytes = void 0;\n  const streamChunk = function* (chunk, chunkSize) {\n    let len = chunk.byteLength;\n    if (!chunkSize || len < chunkSize) {\n      yield chunk;\n      return;\n    }\n    let pos = 0;\n    let end;\n    while (pos < len) {\n      end = pos + chunkSize;\n      yield chunk.slice(pos, end);\n      pos = end;\n    }\n  };\n  exports.streamChunk = streamChunk;\n  const readBytes = async function* (iterable, chunkSize) {\n    for await (const chunk of readStream(iterable)) {\n      yield* streamChunk(chunk, chunkSize);\n    }\n  };\n  exports.readBytes = readBytes;\n  const readStream = async function* (stream) {\n    if (stream[Symbol.asyncIterator]) {\n      yield* stream;\n      return;\n    }\n    const reader = stream.getReader();\n    try {\n      for (;;) {\n        const {\n          done,\n          value\n        } = await reader.read();\n        if (done) {\n          break;\n        }\n        yield value;\n      }\n    } finally {\n      await reader.cancel();\n    }\n  };\n  const trackStream = (stream, chunkSize, onProgress, onFinish) => {\n    const iterator = readBytes(stream, chunkSize);\n    let bytes = 0;\n    let done;\n    let _onFinish = e => {\n      if (!done) {\n        done = true;\n        onFinish && onFinish(e);\n      }\n    };\n    return new ReadableStream({\n      async pull(controller) {\n        try {\n          const {\n            done,\n            value\n          } = await iterator.next();\n          if (done) {\n            _onFinish();\n            controller.close();\n            return;\n          }\n          let len = value.byteLength;\n          if (onProgress) {\n            let loadedBytes = bytes += len;\n            onProgress(loadedBytes);\n          }\n          controller.enqueue(new Uint8Array(value));\n        } catch (err) {\n          _onFinish(err);\n          throw err;\n        }\n      },\n      cancel(reason) {\n        _onFinish(reason);\n        return iterator.return();\n      }\n    }, {\n      highWaterMark: 2\n    });\n  };\n  exports.trackStream = trackStream;\n});","lineCount":90,"map":[[6,2,2,7],[6,8,2,13,"streamChunk"],[6,19,2,24],[6,22,2,27],[6,32,2,27,"streamChunk"],[6,33,2,38,"chunk"],[6,38,2,43],[6,40,2,45,"chunkSize"],[6,49,2,54],[6,51,2,56],[7,4,3,2],[7,8,3,6,"len"],[7,11,3,9],[7,14,3,12,"chunk"],[7,19,3,17],[7,20,3,18,"byteLength"],[7,30,3,28],[8,4,5,2],[8,8,5,6],[8,9,5,7,"chunkSize"],[8,18,5,16],[8,22,5,20,"len"],[8,25,5,23],[8,28,5,26,"chunkSize"],[8,37,5,35],[8,39,5,37],[9,6,6,4],[9,12,6,10,"chunk"],[9,17,6,15],[10,6,7,4],[11,4,8,2],[12,4,10,2],[12,8,10,6,"pos"],[12,11,10,9],[12,14,10,12],[12,15,10,13],[13,4,11,2],[13,8,11,6,"end"],[13,11,11,9],[14,4,13,2],[14,11,13,9,"pos"],[14,14,13,12],[14,17,13,15,"len"],[14,20,13,18],[14,22,13,20],[15,6,14,4,"end"],[15,9,14,7],[15,12,14,10,"pos"],[15,15,14,13],[15,18,14,16,"chunkSize"],[15,27,14,25],[16,6,15,4],[16,12,15,10,"chunk"],[16,17,15,15],[16,18,15,16,"slice"],[16,23,15,21],[16,24,15,22,"pos"],[16,27,15,25],[16,29,15,27,"end"],[16,32,15,30],[16,33,15,31],[17,6,16,4,"pos"],[17,9,16,7],[17,12,16,10,"end"],[17,15,16,13],[18,4,17,2],[19,2,18,0],[19,3,18,1],[20,2,18,1,"exports"],[20,9,18,1],[20,10,18,1,"streamChunk"],[20,21,18,1],[20,24,18,1,"streamChunk"],[20,35,18,1],[21,2,20,7],[21,8,20,13,"readBytes"],[21,17,20,22],[21,20,20,25],[21,36,20,25,"readBytes"],[21,37,20,42,"iterable"],[21,45,20,50],[21,47,20,52,"chunkSize"],[21,56,20,61],[21,58,20,63],[22,4,21,2],[22,15,21,13],[22,21,21,19,"chunk"],[22,26,21,24],[22,30,21,28,"readStream"],[22,40,21,38],[22,41,21,39,"iterable"],[22,49,21,47],[22,50,21,48],[22,52,21,50],[23,6,22,4],[23,13,22,11,"streamChunk"],[23,24,22,22],[23,25,22,23,"chunk"],[23,30,22,28],[23,32,22,30,"chunkSize"],[23,41,22,39],[23,42,22,40],[24,4,23,2],[25,2,24,0],[25,3,24,1],[26,2,24,1,"exports"],[26,9,24,1],[26,10,24,1,"readBytes"],[26,19,24,1],[26,22,24,1,"readBytes"],[26,31,24,1],[27,2,26,0],[27,8,26,6,"readStream"],[27,18,26,16],[27,21,26,19],[27,37,26,19,"readStream"],[27,38,26,36,"stream"],[27,44,26,42],[27,46,26,44],[28,4,27,2],[28,8,27,6,"stream"],[28,14,27,12],[28,15,27,13,"Symbol"],[28,21,27,19],[28,22,27,20,"asyncIterator"],[28,35,27,33],[28,36,27,34],[28,38,27,36],[29,6,28,4],[29,13,28,11,"stream"],[29,19,28,17],[30,6,29,4],[31,4,30,2],[32,4,32,2],[32,10,32,8,"reader"],[32,16,32,14],[32,19,32,17,"stream"],[32,25,32,23],[32,26,32,24,"getReader"],[32,35,32,33],[32,36,32,34],[32,37,32,35],[33,4,33,2],[33,8,33,6],[34,6,34,4],[34,15,34,13],[35,8,35,6],[35,14,35,12],[36,10,35,13,"done"],[36,14,35,17],[37,10,35,19,"value"],[38,8,35,24],[38,9,35,25],[38,12,35,28],[38,18,35,34,"reader"],[38,24,35,40],[38,25,35,41,"read"],[38,29,35,45],[38,30,35,46],[38,31,35,47],[39,8,36,6],[39,12,36,10,"done"],[39,16,36,14],[39,18,36,16],[40,10,37,8],[41,8,38,6],[42,8,39,6],[42,14,39,12,"value"],[42,19,39,17],[43,6,40,4],[44,4,41,2],[44,5,41,3],[44,14,41,12],[45,6,42,4],[45,12,42,10,"reader"],[45,18,42,16],[45,19,42,17,"cancel"],[45,25,42,23],[45,26,42,24],[45,27,42,25],[46,4,43,2],[47,2,44,0],[47,3,44,1],[48,2,46,7],[48,8,46,13,"trackStream"],[48,19,46,24],[48,22,46,27,"trackStream"],[48,23,46,28,"stream"],[48,29,46,34],[48,31,46,36,"chunkSize"],[48,40,46,45],[48,42,46,47,"onProgress"],[48,52,46,57],[48,54,46,59,"onFinish"],[48,62,46,67],[48,67,46,72],[49,4,47,2],[49,10,47,8,"iterator"],[49,18,47,16],[49,21,47,19,"readBytes"],[49,30,47,28],[49,31,47,29,"stream"],[49,37,47,35],[49,39,47,37,"chunkSize"],[49,48,47,46],[49,49,47,47],[50,4,49,2],[50,8,49,6,"bytes"],[50,13,49,11],[50,16,49,14],[50,17,49,15],[51,4,50,2],[51,8,50,6,"done"],[51,12,50,10],[52,4,51,2],[52,8,51,6,"_onFinish"],[52,17,51,15],[52,20,51,19,"e"],[52,21,51,20],[52,25,51,25],[53,6,52,4],[53,10,52,8],[53,11,52,9,"done"],[53,15,52,13],[53,17,52,15],[54,8,53,6,"done"],[54,12,53,10],[54,15,53,13],[54,19,53,17],[55,8,54,6,"onFinish"],[55,16,54,14],[55,20,54,18,"onFinish"],[55,28,54,26],[55,29,54,27,"e"],[55,30,54,28],[55,31,54,29],[56,6,55,4],[57,4,56,2],[57,5,56,3],[58,4,58,2],[58,11,58,9],[58,15,58,13,"ReadableStream"],[58,29,58,27],[58,30,58,28],[59,6,59,4],[59,12,59,10,"pull"],[59,16,59,14,"pull"],[59,17,59,15,"controller"],[59,27,59,25],[59,29,59,27],[60,8,60,6],[60,12,60,10],[61,10,61,8],[61,16,61,14],[62,12,61,15,"done"],[62,16,61,19],[63,12,61,21,"value"],[64,10,61,26],[64,11,61,27],[64,14,61,30],[64,20,61,36,"iterator"],[64,28,61,44],[64,29,61,45,"next"],[64,33,61,49],[64,34,61,50],[64,35,61,51],[65,10,63,8],[65,14,63,12,"done"],[65,18,63,16],[65,20,63,18],[66,12,64,9,"_onFinish"],[66,21,64,18],[66,22,64,19],[66,23,64,20],[67,12,65,10,"controller"],[67,22,65,20],[67,23,65,21,"close"],[67,28,65,26],[67,29,65,27],[67,30,65,28],[68,12,66,10],[69,10,67,8],[70,10,69,8],[70,14,69,12,"len"],[70,17,69,15],[70,20,69,18,"value"],[70,25,69,23],[70,26,69,24,"byteLength"],[70,36,69,34],[71,10,70,8],[71,14,70,12,"onProgress"],[71,24,70,22],[71,26,70,24],[72,12,71,10],[72,16,71,14,"loadedBytes"],[72,27,71,25],[72,30,71,28,"bytes"],[72,35,71,33],[72,39,71,37,"len"],[72,42,71,40],[73,12,72,10,"onProgress"],[73,22,72,20],[73,23,72,21,"loadedBytes"],[73,34,72,32],[73,35,72,33],[74,10,73,8],[75,10,74,8,"controller"],[75,20,74,18],[75,21,74,19,"enqueue"],[75,28,74,26],[75,29,74,27],[75,33,74,31,"Uint8Array"],[75,43,74,41],[75,44,74,42,"value"],[75,49,74,47],[75,50,74,48],[75,51,74,49],[76,8,75,6],[76,9,75,7],[76,10,75,8],[76,17,75,15,"err"],[76,20,75,18],[76,22,75,20],[77,10,76,8,"_onFinish"],[77,19,76,17],[77,20,76,18,"err"],[77,23,76,21],[77,24,76,22],[78,10,77,8],[78,16,77,14,"err"],[78,19,77,17],[79,8,78,6],[80,6,79,4],[80,7,79,5],[81,6,80,4,"cancel"],[81,12,80,10,"cancel"],[81,13,80,11,"reason"],[81,19,80,17],[81,21,80,19],[82,8,81,6,"_onFinish"],[82,17,81,15],[82,18,81,16,"reason"],[82,24,81,22],[82,25,81,23],[83,8,82,6],[83,15,82,13,"iterator"],[83,23,82,21],[83,24,82,22,"return"],[83,30,82,28],[83,31,82,29],[83,32,82,30],[84,6,83,4],[85,4,84,2],[85,5,84,3],[85,7,84,5],[86,6,85,4,"highWaterMark"],[86,19,85,17],[86,21,85,19],[87,4,86,2],[87,5,86,3],[87,6,86,4],[88,2,87,0],[88,3,87,1],[89,2,87,1,"exports"],[89,9,87,1],[89,10,87,1,"trackStream"],[89,21,87,1],[89,24,87,1,"trackStream"],[89,35,87,1],[90,0,87,1],[90,3]],"functionMap":{"names":["<global>","streamChunk","readBytes","readStream","trackStream","_onFinish","ReadableStream$argument_0.pull","ReadableStream$argument_0.cancel"],"mappings":"AAA;2BCC;CDgB;yBEE;CFI;mBGE;CHkB;2BIE;kBCK;GDK;IEG;KFoB;IGC;KHG;CJI"}},"type":"js/module"}]}