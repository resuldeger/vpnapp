{"dependencies":[],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  'use strict';\n\n  /**\n   * Calculate data maxRate\n   * @param {Number} [samplesCount= 10]\n   * @param {Number} [min= 1000]\n   * @returns {Function}\n   */\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.default = void 0;\n  function speedometer(samplesCount, min) {\n    samplesCount = samplesCount || 10;\n    const bytes = new Array(samplesCount);\n    const timestamps = new Array(samplesCount);\n    let head = 0;\n    let tail = 0;\n    let firstSampleTS;\n    min = min !== undefined ? min : 1000;\n    return function push(chunkLength) {\n      const now = Date.now();\n      const startedAt = timestamps[tail];\n      if (!firstSampleTS) {\n        firstSampleTS = now;\n      }\n      bytes[head] = chunkLength;\n      timestamps[head] = now;\n      let i = tail;\n      let bytesCount = 0;\n      while (i !== head) {\n        bytesCount += bytes[i++];\n        i = i % samplesCount;\n      }\n      head = (head + 1) % samplesCount;\n      if (head === tail) {\n        tail = (tail + 1) % samplesCount;\n      }\n      if (now - firstSampleTS < min) {\n        return;\n      }\n      const passed = startedAt && now - startedAt;\n      return passed ? Math.round(bytesCount * 1000 / passed) : undefined;\n    };\n  }\n  var _default = exports.default = speedometer;\n});","lineCount":48,"map":[[2,2,1,0],[2,14,1,12],[4,2,3,0],[5,0,4,0],[6,0,5,0],[7,0,6,0],[8,0,7,0],[9,0,8,0],[10,2,3,0,"Object"],[10,8,3,0],[10,9,3,0,"defineProperty"],[10,23,3,0],[10,24,3,0,"exports"],[10,31,3,0],[11,4,3,0,"value"],[11,9,3,0],[12,2,3,0],[13,2,3,0,"exports"],[13,9,3,0],[13,10,3,0,"default"],[13,17,3,0],[14,2,9,0],[14,11,9,9,"speedometer"],[14,22,9,20,"speedometer"],[14,23,9,21,"samplesCount"],[14,35,9,33],[14,37,9,35,"min"],[14,40,9,38],[14,42,9,40],[15,4,10,2,"samplesCount"],[15,16,10,14],[15,19,10,17,"samplesCount"],[15,31,10,29],[15,35,10,33],[15,37,10,35],[16,4,11,2],[16,10,11,8,"bytes"],[16,15,11,13],[16,18,11,16],[16,22,11,20,"Array"],[16,27,11,25],[16,28,11,26,"samplesCount"],[16,40,11,38],[16,41,11,39],[17,4,12,2],[17,10,12,8,"timestamps"],[17,20,12,18],[17,23,12,21],[17,27,12,25,"Array"],[17,32,12,30],[17,33,12,31,"samplesCount"],[17,45,12,43],[17,46,12,44],[18,4,13,2],[18,8,13,6,"head"],[18,12,13,10],[18,15,13,13],[18,16,13,14],[19,4,14,2],[19,8,14,6,"tail"],[19,12,14,10],[19,15,14,13],[19,16,14,14],[20,4,15,2],[20,8,15,6,"firstSampleTS"],[20,21,15,19],[21,4,17,2,"min"],[21,7,17,5],[21,10,17,8,"min"],[21,13,17,11],[21,18,17,16,"undefined"],[21,27,17,25],[21,30,17,28,"min"],[21,33,17,31],[21,36,17,34],[21,40,17,38],[22,4,19,2],[22,11,19,9],[22,20,19,18,"push"],[22,24,19,22,"push"],[22,25,19,23,"chunkLength"],[22,36,19,34],[22,38,19,36],[23,6,20,4],[23,12,20,10,"now"],[23,15,20,13],[23,18,20,16,"Date"],[23,22,20,20],[23,23,20,21,"now"],[23,26,20,24],[23,27,20,25],[23,28,20,26],[24,6,22,4],[24,12,22,10,"startedAt"],[24,21,22,19],[24,24,22,22,"timestamps"],[24,34,22,32],[24,35,22,33,"tail"],[24,39,22,37],[24,40,22,38],[25,6,24,4],[25,10,24,8],[25,11,24,9,"firstSampleTS"],[25,24,24,22],[25,26,24,24],[26,8,25,6,"firstSampleTS"],[26,21,25,19],[26,24,25,22,"now"],[26,27,25,25],[27,6,26,4],[28,6,28,4,"bytes"],[28,11,28,9],[28,12,28,10,"head"],[28,16,28,14],[28,17,28,15],[28,20,28,18,"chunkLength"],[28,31,28,29],[29,6,29,4,"timestamps"],[29,16,29,14],[29,17,29,15,"head"],[29,21,29,19],[29,22,29,20],[29,25,29,23,"now"],[29,28,29,26],[30,6,31,4],[30,10,31,8,"i"],[30,11,31,9],[30,14,31,12,"tail"],[30,18,31,16],[31,6,32,4],[31,10,32,8,"bytesCount"],[31,20,32,18],[31,23,32,21],[31,24,32,22],[32,6,34,4],[32,13,34,11,"i"],[32,14,34,12],[32,19,34,17,"head"],[32,23,34,21],[32,25,34,23],[33,8,35,6,"bytesCount"],[33,18,35,16],[33,22,35,20,"bytes"],[33,27,35,25],[33,28,35,26,"i"],[33,29,35,27],[33,31,35,29],[33,32,35,30],[34,8,36,6,"i"],[34,9,36,7],[34,12,36,10,"i"],[34,13,36,11],[34,16,36,14,"samplesCount"],[34,28,36,26],[35,6,37,4],[36,6,39,4,"head"],[36,10,39,8],[36,13,39,11],[36,14,39,12,"head"],[36,18,39,16],[36,21,39,19],[36,22,39,20],[36,26,39,24,"samplesCount"],[36,38,39,36],[37,6,41,4],[37,10,41,8,"head"],[37,14,41,12],[37,19,41,17,"tail"],[37,23,41,21],[37,25,41,23],[38,8,42,6,"tail"],[38,12,42,10],[38,15,42,13],[38,16,42,14,"tail"],[38,20,42,18],[38,23,42,21],[38,24,42,22],[38,28,42,26,"samplesCount"],[38,40,42,38],[39,6,43,4],[40,6,45,4],[40,10,45,8,"now"],[40,13,45,11],[40,16,45,14,"firstSampleTS"],[40,29,45,27],[40,32,45,30,"min"],[40,35,45,33],[40,37,45,35],[41,8,46,6],[42,6,47,4],[43,6,49,4],[43,12,49,10,"passed"],[43,18,49,16],[43,21,49,19,"startedAt"],[43,30,49,28],[43,34,49,32,"now"],[43,37,49,35],[43,40,49,38,"startedAt"],[43,49,49,47],[44,6,51,4],[44,13,51,11,"passed"],[44,19,51,17],[44,22,51,20,"Math"],[44,26,51,24],[44,27,51,25,"round"],[44,32,51,30],[44,33,51,31,"bytesCount"],[44,43,51,41],[44,46,51,44],[44,50,51,48],[44,53,51,51,"passed"],[44,59,51,57],[44,60,51,58],[44,63,51,61,"undefined"],[44,72,51,70],[45,4,52,2],[45,5,52,3],[46,2,53,0],[47,2,53,1],[47,6,53,1,"_default"],[47,14,53,1],[47,17,53,1,"exports"],[47,24,53,1],[47,25,53,1,"default"],[47,32,53,1],[47,35,55,15,"speedometer"],[47,46,55,26],[48,0,55,26],[48,3]],"functionMap":{"names":["<global>","speedometer","push"],"mappings":"AAA;ACQ;SCU;GDiC;CDC"}},"type":"js/module"}]}